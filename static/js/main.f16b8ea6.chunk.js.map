{"version":3,"sources":["components/getGifs.js","components/Gif.js","components/ListOfGifs.js","App.js","reportWebVitals.js","index.js"],"names":["apiKey","Gif","title","id","url","href","target","rel","className","src","alt","ListOfGifs","params","useState","loading","setLoading","keyword","gifs","setGifs","useEffect","apiURL","fetch","then","response","json","data","map","image","images","downsized_medium","getGif","App","to","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAAMA,EAAS,mC,MCGA,SAASC,EAAT,GAA+B,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAAIC,EAAK,EAALA,IACpC,OACI,oBAAGC,KAAI,WAAMF,GAAMG,OAAO,SAASC,IAAI,aAAYC,UAAU,MAA7D,UACI,6BAAKN,IACL,qBAAKO,IAAKL,EAAKM,IAAKR,OCHjB,SAASS,EAAT,GAA+B,IAAVC,EAAS,EAATA,OAAS,EAEXC,oBAAS,GAFE,mBAElCC,EAFkC,KAEzBC,EAFyB,KAIlCC,EAAWJ,EAAXI,QAJkC,EAKjBH,mBAAS,IALQ,mBAKlCI,EALkC,KAK5BC,EAL4B,KAgBzC,OATAC,qBAAU,WACNJ,GAAW,GFVJ,WAAwC,IAAD,0DAAH,IAAnBC,eAAsB,MAAZ,MAAY,EAE5CI,EAAM,uDAAmDpB,EAAnD,cAA+DgB,EAA/D,uCAEZ,OAAOK,MAAMD,GACZE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAUJ,OAReA,EAARE,KACWC,KAAI,SAAAC,GAAU,IACvBC,EAAqBD,EAArBC,OAGP,MAAO,CAAC1B,MAHoByB,EAAbzB,MAGAC,GAHawB,EAANxB,GAGHC,IAFLwB,EAAOC,iBAAdzB,WECP0B,CAAO,CAACd,YAAUM,MAAK,SAAAL,GAASC,EAAQD,GAExCF,GAAW,QAEZ,CAACC,IAEDF,EAEQ,4CAGJ,8BAAOG,EAAKS,KAAI,gBAAEvB,EAAF,EAAEA,GAAID,EAAN,EAAMA,MAAOE,EAAb,EAAaA,IAAb,OAAsB,cAAC,EAAD,CAAKD,GAAIA,EAAID,MAAOA,EAAOE,IAAKA,S,WCLlE2B,MAhBf,WAGE,OACE,qBAAKvB,UAAU,MAAf,SACE,0BAASA,UAAU,cAAnB,UACE,cAAC,IAAD,CAAMwB,GAAG,cAAT,wBACA,cAAC,IAAD,CAAMA,GAAG,cAAT,wBACA,cAAC,IAAD,CAAMA,GAAG,kBAAT,4BACA,cAAC,IAAD,CAAMA,GAAG,cAAT,wBACC,cAAC,IAAD,CAAOC,KAAK,gBAAgBC,UAAWvB,UCFjCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f16b8ea6.chunk.js","sourcesContent":["const apiKey = 'PPBUtDN4WT3mLzid5YP9pisQVaT9PlGt'\n\nexport default function getGif({keyword = '747'} = {}){\n\n    const apiURL = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${keyword}&limit=25&offset=0&rating=g&lang=es`\n\n    return fetch(apiURL)\n    .then(response => response.json())\n    .then(response => {\n\n      const {data} = response; \n      const gifs = data.map(image => {\n        const {images, title, id} = image;  \n        const {url} = images.downsized_medium\n        \n        return {title, id, url}\n       });\n        \n      return gifs\n    })\n}","import React from 'react';\nimport './Gif.css';\n\nexport default function Gif({title, id, url}){\n    return (\n        <a href={`#${id}`} target=\"_blank\" rel=\"noreferrer\"className=\"Gif\">\n            <h4>{title}</h4>\n            <img src={url} alt={title}/>\n        </a>\n    )\n}","import React, {useEffect, useState} from 'react';\nimport getGif from './getGifs';\nimport Gif from './Gif';\n\nexport default function ListOfGifs({params}) {\n\n    const [loading, setLoading] = useState(false); \n\n    const {keyword} = params;\n    const [gifs, setGifs] = useState([]);\n\n    useEffect(() => {\n        setLoading(true); \n       \n        getGif({keyword}).then(gifs => {setGifs(gifs)\n            \n        setLoading(false);\n        })\n    }, [keyword]);\n\n    if(loading){\n\n        return <i>Cargando...</i>;\n    }\n\n    return <div>{ gifs.map(({id, title, url}) => <Gif id={id} title={title} url={url} /> \n           ) }</div>;\n    }\n","import './App.css';\nimport ListOfGifs from './components/ListOfGifs';\nimport { Link, Route } from \"wouter\";\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <section className=\"App-content\">\n        <Link to=\"/gif/boeing\">Gif Boeing</Link>\n        <Link to=\"/gif/airbus\">Gif Airbus</Link>\n        <Link to=\"/gif/gulfstream\">Gif Gulfstream</Link>\n        <Link to=\"/gif/cessna\">Gif Cessna</Link>\n         <Route path=\"/gif/:keyword\" component={ListOfGifs} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}